[
  {
    "name": "PokeR",
    "color": [
      53,
      55,
      72
    ],
    "icon": "assets/svg/creation/poker.svg",
    "routerLink": null,
    "description": "realtime scrum poker",
    "blurb": "PokeR is a planning poker game that provides realtime interaction and some fun touches to make sprint planning less of a headache.  Built with fully custom styles and components, this app turns otherwise mundane planning sessions into a pleasure.",
    "links": [
      {
        "url": "https://github.com/halomademeapc/pokeR",
        "text": "View on GitHub",
        "icon": "assets/svg/mono/github.svg"
      },
      {
        "url": "https://app.planning.rocks",
        "text": "See Demo",
        "icon": "assets/svg/mono/open-in-new.svg"
      }
    ],
    "expanded": false,
    "tech": [
      "SignalR",
      "Angular",
      "rxjs",
      "ASP.NET Core",
      "Entity Framework Core",
      "Sass",
      "Docker"
    ]
  },
  {
    "name": "GravyBot",
    "color": [
      60,
      112,
      196
    ],
    "icon": "https://raw.githubusercontent.com/halomademeapc/GravyBot/master/logo.png",
    "routerLink": null,
    "description": "GravyBot - IRC bot framework",
    "blurb": "GravyBot is an Internet Relay Chat (IRC) chat bot framework that provides a beautiful annotation-based command authoring system reminiscent of ASP.NET Core MVC.  The framework provides annotation-based command registration, documentation generation, channel permissions, rate limiting, and parameter binding withing a familiar scoped dependency injection container.  It also supports strongly-typed message interception and rules as well as modern features like async enumerables to prevent thread blocking and give super-fast performance.",
    "links": [
      {
        "url": "https://github.com/halomademeapc/GravyBot",
        "text": "View on GitHub",
        "icon": "assets/svg/mono/github.svg"
      },
      {
        "url": "https://www.nuget.org/packages/GravyBot/",
        "text": "View on nuget.org",
        "icon": "assets/svg/mono/open-in-new.svg"
      }
    ],
    "expanded": false,
    "tech": [
      ".NET Standard",
      "Internet Relay Chat",
      "NuGet"
    ]
  },
  {
    "name": "DeskDex",
    "color": [
      180,
      47,
      38
    ],
    "icon": "assets/svg/creation/deskdex.svg",
    "routerLink": null,
    "description": "employee locator",
    "blurb": "DeskDex helps coworkers find each other and meet up.  It uses a unique identifier from docking stations in to keep track of where everyone is in an unassigned seating plan.  The version on GitHub and Azure includes a map of stations and an administrative back-end.  Since being adopted at Indiana Farm Bureau Insurance, I have expanded the application to include Exchange integration and enhanced personal details.  This was my first application using C# and ASP.NET Core.",
    "links": [
      {
        "url": "https://github.com/halomademeapc/DeskDex",
        "text": "View on GitHub",
        "icon": "assets/svg/mono/github.svg"
      },
      {
        "url": "https://deskdex.azurewebsites.net",
        "text": "See Demo",
        "icon": "assets/svg/mono/open-in-new.svg"
      }
    ],
    "expanded": false,
    "tech": [
      "ASP.NET Core",
      "Entity Framework Core",
      "Azure AD",
      "Material Design Bootstrap",
      "jQuery"
    ]
  },
  {
    "name": "phÿnd",
    "color": [
      66,
      133,
      244
    ],
    "icon": "assets/svg/creation/phynd.svg",
    "routerLink": null,
    "description": "learning tic·tac·toe",
    "blurb": "This is a recreation of a school project.  The original was created using Python and Bottle; I thought it would be fun to revisit it and play with some new toys.  This version is built using Server-Side Blazor.  Everything is computed on the server side and events and HTML deltas are communicated with the client via WebSockets.  phÿnd is a machine-learning (in the loosest sense of the term) application that plays tic-tac-toe. phÿnd knows nothing about the game in terms of strategy; it only knows which moves it has made and whether that move led to a loss. phÿnd initially chooses a spot to place its cross at random, leading to some embarassing losses. However, as phÿnd loses, it becomes progressively less likely to make those same decisions that led to a loss.  The application is built around the MENACE concept, as outlined on the about page of the demo site.  ",
    "links": [
      {
        "url": "https://github.com/halomademeapc/phyndotnet",
        "text": "View on GitHub",
        "icon": "assets/svg/mono/github.svg"
      },
      {
        "url": "https://phynd.halomademeapc.com/",
        "text": "See Demo",
        "icon": "assets/svg/mono/open-in-new.svg"
      }
    ],
    "expanded": false,
    "tech": [
      "Blazor",
      ".NET Core",
      "Material Design Bootstrap"
    ]
  }
]